# To build and launch (first time):
#   $ docker-compose up -d
# To create new images (--no-cache) to force building from scratch:
#   $ docker-compose build
# To launch again (leave out -d for non daemon launch):
#   $ docker-compose up -d
# Short command for rebuilding and restarting
#   $ docker-compose up -d --build
# To stop containers:
#  $ docker-compose stop
# To clean up containers/images/networks:
#  $ docker system prune
version: '3'
networks:
  frontend:
    driver: bridge
  database:
    driver: bridge
  workers:
    internal: true
    driver: bridge
services:
  web:
    build:
      context: .
      dockerfile: DockerfileNginx
    depends_on:
      - webgme-server
    volumes:
      - ~/dockershare/ssl_certs:/ssl_certs
    networks:
      - frontend
    ports:
      - 80:80
      - 443:443
  webgme-server:
    build:
      dockerfile: DockerfileDeployed
      context: .
    depends_on:
    - mongo
    environment:
    - NODE_ENV=docker
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ~/dockershare/token_keys:/token_keys
    - ~/dockershare/blob-local-storage:/blob-local-storage
    networks:
    - database
    - workers
    - frontend
  mongo:
    image: mongo:3.4.1
    ports:
    - 27017:27017 # Uncomment to expose mongo-port on host
    volumes:
    - ~/dockershare/db:/data/db
    networks:
    - database
  py-core-executor:
    build:
      context: .
      dockerfile: DockerfilePyCoreExecutor
    depends_on:
    - webgme-server
    networks:
    - workers
    environment:
    - NODE_ENV=docker
    command: ["cat", "/dev/null"] # A no-op command so the image is built.
  jupyter:
    build:
      context: .
      dockerfile: DockerfileJupyter
    networks:
      - frontend
      - workers
